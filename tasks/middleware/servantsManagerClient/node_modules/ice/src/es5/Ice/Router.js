"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */

/* jshint ignore: start */

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
  var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;

  var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/BuiltinSequences"]).Ice;

  var Slice = Ice.Slice;
  /* slice2js browser-bundle-skip-end */

  var iceC_Ice_Router_ids = ["::Ice::Object", "::Ice::Router"];
  /**
   * The Ice router interface. Routers can be set either globally with
   * {@link Communicator#setDefaultRouter}, or with <code>ice_router</code> on specific
   * proxies.
   *
   **/

  Ice.Router = /*#__PURE__*/function (_Ice$Object) {
    _inherits(_class, _Ice$Object);

    var _super = _createSuper(_class);

    function _class() {
      _classCallCheck(this, _class);

      return _super.apply(this, arguments);
    }

    return _class;
  }(Ice.Object);

  Ice.RouterPrx = /*#__PURE__*/function (_Ice$ObjectPrx) {
    _inherits(_class2, _Ice$ObjectPrx);

    var _super2 = _createSuper(_class2);

    function _class2() {
      _classCallCheck(this, _class2);

      return _super2.apply(this, arguments);
    }

    return _class2;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Ice.Router, Ice.RouterPrx, iceC_Ice_Router_ids, 1, {
    "getClientProxy": [, 2, 1,, [9],, [[1,, 1]],,,],
    "getServerProxy": [, 2, 1,, [9],,,,,],
    "addProxies": [, 2, 2,, ["Ice.ObjectProxySeqHelper"], [["Ice.ObjectProxySeqHelper"]],,,,]
  });
  var iceC_Ice_RouterFinder_ids = ["::Ice::Object", "::Ice::RouterFinder"];
  /**
   * This inferface should be implemented by services implementing the
   * Ice::Router interface. It should be advertised through an Ice
   * object with the identity `Ice/RouterFinder'. This allows clients to
   * retrieve the router proxy with just the endpoint information of the
   * service.
   *
   **/

  Ice.RouterFinder = /*#__PURE__*/function (_Ice$Object2) {
    _inherits(_class3, _Ice$Object2);

    var _super3 = _createSuper(_class3);

    function _class3() {
      _classCallCheck(this, _class3);

      return _super3.apply(this, arguments);
    }

    return _class3;
  }(Ice.Object);

  Ice.RouterFinderPrx = /*#__PURE__*/function (_Ice$ObjectPrx2) {
    _inherits(_class4, _Ice$ObjectPrx2);

    var _super4 = _createSuper(_class4);

    function _class4() {
      _classCallCheck(this, _class4);

      return _super4.apply(this, arguments);
    }

    return _class4;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Ice.RouterFinder, Ice.RouterFinderPrx, iceC_Ice_RouterFinder_ids, 1, {
    "getRouter": [,,,, ["Ice.RouterPrx"],,,,,]
  });
  /* slice2js browser-bundle-skip */

  exports.Ice = Ice;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self.Ice._require : window.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : window);
/* slice2js browser-bundle-skip-end */